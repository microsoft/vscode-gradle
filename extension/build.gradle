description = 'vscode-gradle :: extension'

def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
def docsFiles = [
  "README.md",
  "LICENSE.md",
  "ARCHITECTURE.md",
  "CONTRIBUTING.md",
  "FEATURES.md",
  "CHANGELOG.md"
]

project.ext.set('protoLib', 'src/proto')

sourceSets {
  main {
    proto {
      srcDir file('../proto')
    }
  }
}

protobuf {
  plugins {
    grpc {
      path = file(
        './node_modules/.bin/grpc_tools_node_protoc_plugin' + (isWindows ? '.cmd' : '')
      )
    }
    ts {
      path = file(
        './node_modules/.bin/protoc-gen-ts' + (isWindows ? '.cmd' : '')
      )
    }
  }
  generateProtoTasks {
    generateTestProto.enabled = false
    extractProto.enabled = false;
    extractIncludeProto.enabled = false;
    extractIncludeTestProto.enabled = false;
    generateProto.finalizedBy copyProtoJs, copyProtoTs
    all().each { task ->
      task.plugins {
        grpc {
          outputSubDir = 'js'
        }
        ts {
          option 'service=grpc-node'
        }
      }
      task.builtins {
        remove java
        js {
          option 'import_style=commonjs'
        }
      }
      task.dependsOn npmInstall
    }
  }
}

sonarqube {
  properties {
    property "sonar.projectKey", "extension"
    property "sonar.projectName", "Extension"
    property "sonar.language", "typescript"
    property "sonar.sources", "src"
    property "sonar.typescript.tsconfigPath", "tsconfig.json"
  }
}

test.enabled = false;
jar.enabled = false;
compileJava.enabled = false
compileTestJava.enabled = false
processResources.enabled = false;

clean {
  delete protobuf.generatedFilesBaseDir
  delete file('node_modules')
  delete file(protoLib)
  delete file('out')
  delete file('.vscode-test')
  delete file('build')
  delete docsFiles
}

task copyProtoJs(type: Copy) {
  dependsOn ':extension:generateProto'
  group 'copy'
  description 'Copies proto JavaScript files into src dir'
  from "$protobuf.generatedFilesBaseDir/main/js"
  into protoLib
  filter { line ->
    line.replaceAll("\'grpc\'", "\'@grpc/grpc-js\'")
  }
}

task copyProtoTs(type: Copy) {
  dependsOn ':extension:generateProto'
  group 'copy'
  description 'Copies proto TypeScript definitions into src dir'
  from "$protobuf.generatedFilesBaseDir/main/ts"
  into protoLib
  filter { line ->
    line.replaceAll('from \"grpc\"', 'from \"@grpc/grpc-js\"')
  }
}

task npmInstall(type: CrossPlatformExec) {
  description 'Installs node dependencies'
  inputs.file('package-lock.json')
  outputs.dir('node_modules')
  commandLine 'npm', 'install'
}

task lint(type: CrossPlatformExec) {
  dependsOn npmInstall
  description 'Lints source files'
  commandLine 'npm', 'run', 'lint'
}

task format(type: CrossPlatformExec) {
  description 'Formats source files'
  commandLine 'npm', 'run', 'lint:fix'
}

task buildDev(type: CrossPlatformExec) {
  dependsOn copyProtoJs, copyProtoTs
  group 'build'
  description 'Builds development version TypeScript source files'
  outputs.dir('dist')
  inputs.dir('src')
  inputs.file('webpack.config.js')
  inputs.file('tsconfig.json')
  commandLine 'npm', 'run', 'compile:dev'
}

task buildTest(type: CrossPlatformExec) {
  dependsOn copyProtoJs, copyProtoTs
  group 'build'
  description 'Builds TypeScript test source files'
  buildDir = 'out'
  outputs.dir(buildDir)
  inputs.dir('src')
  inputs.file('webpack.config.js')
  inputs.file('tsconfig.json')
  commandLine 'npm', 'run', 'compile:test'
}

task buildProd(type: CrossPlatformExec) {
  dependsOn copyProtoJs, copyProtoTs
  group 'build'
  description 'Builds production version TypeScript source files'
  buildDir = 'dist'
  outputs.dir("$buildDir")
  inputs.dir('src')
  inputs.file('webpack.config.js')
  commandLine 'npm', 'run', 'compile:prod'
}

task bundle() {
  dependsOn ':gradle-server:build', buildProd, ':npm-package:build'
  group 'build'
  description 'Bundles the extension files for release'
}

task installExtension(type: CrossPlatformExec) {
  dependsOn bundle
  commandLine 'npm', 'run', 'install:ext'
}

task testVsCode(type: CrossPlatformExec) {
  group 'verification'
  description 'Tests the extension'
  commandLine 'npm', 'run', 'test'
}

task copyDocs(type: Copy) {
  group 'copy'
  description 'Copies docs from the root project into the extension'
  from docsFiles.collect { "$rootProject.projectDir/" + it }
  into "$projectDir"
}

task prepareBeta(type: CrossPlatformExec) {
  description 'Prepare the extesion for a BETA release'
  workingDir file('./beta')
  commandLine 'node', 'prepare.js'
}

task prepareForRelease() {
  dependsOn bundle, copyDocs
}

task prepareForBetaRelease() {
  dependsOn bundle, copyDocs, prepareBeta
}

build.finalizedBy buildDev, buildTest
