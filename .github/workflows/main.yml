name: Build & Publish
on:
  push:
  release:
    types: [published]

jobs:
  build-and-analyse:
    name: Build & Analyse
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Use Java 8
        uses: actions/setup-java@v1
        with:
          java-version: '8'
          architecture: x64
      - name: Use Node 12.16.2
        uses: actions/setup-node@v1
        with:
          node-version: 12.16.2
      - name: Lint
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: lint
      - name: Build & Analyse
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: gradle-server:build sonarqube -x :test -x extension:test -x npm-package:test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_SONARCLOUD_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          JAVA_HOME: ''
      - name: Upload lib
        uses: actions/upload-artifact@v1
        with:
          name: lib
          path: extension/lib

  #Â Although the gradle build can run in all environments, we use the Java
  # lib generated in the previous step for a better real-world test.
  test-extension:
    needs: [build-and-analyse]
    name: 'Test Java ${{ matrix.java-version }} - Node ${{ matrix.node-version }} - ${{ matrix.os }}'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [12.16.2]
        java-version: ['8', '11']
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v1
      - name: Use Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Use Java ${{ matrix.java-version }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java-version }}
          architecture: x64
      - name: Build Extension
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: extension:build
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'
      - name: Download lib
        uses: actions/download-artifact@v1
        with:
          name: lib
          path: extension/lib
      - name: Start Xvfb
        run: |
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        if: matrix.os == 'ubuntu-latest'
      - name: Set permissions
        run: |
          chmod +x extension/lib/gradle-server
          unset npm_config_prefix
        if: matrix.os != 'windows-latest'
      - name: Prepare gradle-groovy-custom-build-file
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: build
          build-root-directory: extension/test-fixtures/gradle-groovy-custom-build-file
          wrapper-directory: extension/test-fixtures/gradle-groovy-custom-build-file
      - name: Prepare gradle-groovy-default-build-file
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: build
          build-root-directory: extension/test-fixtures/gradle-groovy-default-build-file
          wrapper-directory: extension/test-fixtures/gradle-groovy-default-build-file
      - name: Prepare gradle-kotlin-default-build-file
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: build
          build-root-directory: extension/test-fixtures/gradle-kotlin-default-build-file
          wrapper-directory: extension/test-fixtures/gradle-kotlin-default-build-file
      - name: Test extension
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: testVsCode
        env:
          DISPLAY: ':99.0'
          CI: 'true'

  publish-beta-extension:
    needs: [test-extension]
    name: Publish BETA extension
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, '/release/')
    steps:
      - uses: actions/checkout@v1
      - name: Use Node 12.16.2
        uses: actions/setup-node@v1
        with:
          node-version: 12.16.2
      - name: Build & prepare extension
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: prepareForBetaRelease
      - name: Publish types
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd npm-package
          version="0.0.$GITHUB_RUN_ID"
          echo "Setting package version $version"
          npm --no-git-tag-version version "$version"
          echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' >> .npmrc
          npm publish
      - name: Publish extension
        env:
          AZURE_TOKEN: ${{ secrets.AZURE_TOKEN }}
        run: |
          cd extension
          version="0.0.$GITHUB_RUN_ID"
          echo "Setting package version $version"
          npm --no-git-tag-version version "$version"
          npx vsce publish -p "$AZURE_TOKEN"

  publish-extension:
    needs: [test-extension]
    name: Publish extension
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/checkout@v1
      - name: Use Node 12.16.2
        uses: actions/setup-node@v1
        with:
          node-version: 12.16.2
      - name: Build & prepare extension
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: prepareForRelease
      - name: Publish types
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd npm-package
          tag=${GITHUB_REF#refs/tags/}
          echo "Setting package version $tag"
          npm --no-git-tag-version version "$tag"
          echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' >> .npmrc
          npm publish
      - name: Publish extension
        env:
          AZURE_TOKEN: ${{ secrets.AZURE_TOKEN }}
        run: |
          cd extension
          tag=${GITHUB_REF#refs/tags/}
          echo "Setting package version $tag"
          npm --no-git-tag-version version "$tag"
          npx vsce publish -p "$AZURE_TOKEN"
