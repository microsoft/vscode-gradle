plugins {
  id 'java'
  id 'application'
  id 'com.github.johnrengelman.shadow' version '6.1.0'
}

description = 'vscode-gradle :: gradle-server'

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}

dependencies {
  implementation "org.gradle:gradle-tooling-api:${gradlingToolingApi}"
  implementation 'javax.annotation:javax.annotation-api:1.3.2'
  implementation "io.grpc:grpc-protobuf:${grpcVersion}"
  implementation "io.grpc:grpc-stub:${grpcVersion}"
  runtimeOnly "io.grpc:grpc-netty:${grpcVersion}"
  runtimeOnly 'org.slf4j:slf4j-simple:2.0.0-alpha1'
  testImplementation "io.grpc:grpc-testing:${grpcVersion}"
  testImplementation 'junit:junit:4.13.1'
  testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
  testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
}

def mainJavaDir = 'src/main/java';
def mainResourcesDir = 'src/main/resources';

sourceSets {
  libsDirName = file('../extension/lib')
  main {
    proto {
      srcDir file('../proto')
    }
    java {
      srcDirs mainJavaDir
      srcDirs 'build/generated/source/proto/main/grpc'
      srcDirs 'build/generated/source/proto/main/java'
    }
    resources {
      srcDirs mainResourcesDir
    }
  }
}

protobuf {
  plugins {
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
    }
  }
  generateProtoTasks {
    generateTestProto.enabled = false
    extractProto.enabled = false;
    extractIncludeProto.enabled = false;
    extractIncludeTestProto.enabled = false;
    all().each { task ->
      task.plugins {
        grpc {}
      }
      task.builtins {
        remove distribution
      }
    }
  }
}

clean {
  delete protobuf.generatedFilesBaseDir
  delete libsDirName
}

shadowJar {
  classifier = null
  // https://github.com/grpc/grpc-java/issues/5794#issuecomment-497976351
  // minimize()
}

application {
  mainClassName = 'com.github.badsyntax.gradle.GradleServer'
}

startScripts.enabled = false
jar.enabled = false
distZip.enabled = false
distTar.enabled = false
shadowDistZip.enabled = false;
shadowDistTar.enabled = false;

sonarqube {
  properties {
    property "sonar.projectKey", "gradle-server"
    property "sonar.projectName", "Tasks Server"
    property "sonar.language", "java"
    property "sonar.java.binaries", "build/classes/java"
    property "sonar.junit.reportsPath", "build/test-results"
    property "sonar.jacoco.reportPath", "build/jacoco/test.exec"
  }
}

spotless {
  java {
    googleJavaFormat()
    removeUnusedImports()
    trimTrailingWhitespace()
    targetExclude "build/**"
  }
}

task serverStartScripts(type: CreateStartScripts) {
  dependsOn shadowJar
  outputDir = file(libsDirName)
  mainClassName = 'com.github.badsyntax.gradle.GradleServer'
  applicationName = project.name
  classpath = shadowJar.outputs.files
  unixStartScriptGenerator.template = resources.text.fromFile(
    "$mainResourcesDir/startScriptTemplates/unixStartScript.txt"
  )
  windowsStartScriptGenerator.template = resources.text.fromFile(
    "$mainResourcesDir/startScriptTemplates/windowsStartScript.txt"
  )
}

compileJava.dependsOn 'generateProto', 'spotlessCheck'
assemble.dependsOn serverStartScripts
