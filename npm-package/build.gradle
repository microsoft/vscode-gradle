description = 'vscode-gradle :: npm-package'

def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')

project.ext.set('protoLib', "lib/proto")

clean {
  delete file('node_modules')
  delete file('lib')
  delete file('index.d.ts')
  delete file('index.js')
}

jar.enabled = false;

task copyProtoLib(type: Copy) {
  dependsOn ':extension:generateProto'
  group 'copy'
  description 'Copies genereated proto files'
  from file("../extension/src/proto")
  into protoLib
}

task copyViewTypes(type: Copy) {
  dependsOn ':extension:buildProd'
  group 'copy'
  description 'Copies views'
  from file("../extension/out/views")
  include "*.d.ts"
  into 'lib/views'
}

task copyClientTypes(type: Copy) {
  dependsOn ':extension:buildProd'
  group 'copy'
  description 'Copies client'
  from file("../extension/out/client")
  include "*.d.ts"
  into 'lib/client'
}

task copyTasksTypes(type: Copy) {
  dependsOn ':extension:buildProd'
  group 'copy'
  description 'Copies tasks'
  from file("../extension/out/tasks")
  include "*.d.ts"
  into 'lib/tasks'
}

task copyServerTypes(type: Copy) {
  dependsOn ':extension:buildProd'
  group 'copy'
  description 'Copies server'
  from file("../extension/out/server")
  include "*.d.ts"
  into 'lib/server'
}

task copyLoggerTypes(type: Copy) {
  dependsOn ':extension:buildProd'
  group 'copy'
  description 'Copies logger'
  from file("../extension/out/logger")
  include "*.d.ts"
  into 'lib/logger'
}

task copyPublicApi(type: Copy) {
  dependsOn ':extension:buildProd',
    copyViewTypes,
    copyClientTypes,
    copyTasksTypes,
    copyServerTypes,
    copyLoggerTypes
  group 'copy'
  description 'Copies publc API types'
  from file("../extension/out")
  include "*.d.ts"
  into 'lib'
}

task npmInstall(type: CrossPlatformExec) {
  description 'Installs node dependencies'
  inputs.file('package-lock.json')
  outputs.dir('node_modules')
  commandLine 'npm', 'install'
}

task compileTypeScript(type: CrossPlatformExec) {
  dependsOn npmInstall, copyPublicApi
  description 'Compiles the TypeScript files'
  inputs.file('index.ts')
  outputs.file('index.d.ts');
  outputs.file('index.js');
  commandLine 'npm', 'run', 'compile'
}

build.finalizedBy npmInstall,
  compileTypeScript,
  copyProtoLib,
  copyPublicApi
